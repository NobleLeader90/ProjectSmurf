@model OperationSmurf.ViewModels.ClassroomGrid

@{
    ViewData["Title"] = "Home Page";
}
   
<div class="text-center">
    <h1 class="display-4">Welcome to Johns Creek SMF/MOWR</h1>
    <p>Select a Section to Display</p>
    <p class="fas fa-igloo"></p>

</div>
<div id="mainContent">
    <div class="text-center">
        <form asp-action="Home">

            @{        
               
                List<Section> classes = (List<Section>)ViewData["classes"];
                foreach (Section section in classes)
                {
                    String s = section.Period + ": " + section.CourseName;
                    int id = section.Id;
                    <input type="submit" value="@s" class="btn btn-dark" align="center" formaction="/Home/Index/@id" />
                }
            }
        </form>
        <p>Message from Tracer: @ViewData["tracer"]</p>

        <a href="#myModal" role="button" class="btn" data-toggle="modal">Launch Modal</a>

        <br /><br /><br />
    </div>

    <table class="mvc-grid table">
        <thead>
            <tr>
                <th class="mvc-grid-headers" width="40%">Student Names</th>
                @{
                    foreach (Event ev in Model.Columns)
                    {
                        <th class="mvc-grid-headers" data-toggle="tooltip" data-placement="top" title="@ev.Id:@ev.EventNum." width="10px">@ev.EventNum</th>
                    }

                }
            </tr>
        </thead>
        <tbody>
            @try
            {
                @for (int x = 0; x < Model.Students.Count; x++)
                {

                    <tr>
                        <td width="40%">@Model.StudentNames[x]</td>

                        @for (int y = 0; y < Model.Columns.Count; y++)
                        {
                            @switch (Model.GradeGrid[x, y].State)
                            {
                                case 0:
                                    <td width="40px"  data-toggle="tooltip" data-placement="top" title="@Model.Students.Find(s => s.Id == (Model.GradeGrid[x,y].StudentId)).LastName:@Model.Columns[y].EventNum"><a href="#myModal" data-toggle="modal" data-id="@Model.GradeGrid[x,y].State" data-id2="@Model.Columns[y].EventNum" data-id3="@Model.Students.Find(s => s.Id == (Model.GradeGrid[x,y].StudentId)).LastName" data-id4="@x" data-id5="@Model.Columns[y].Id" data-id6="@Model.Students.Find(s => s.Id == (Model.GradeGrid[x,y].StudentId)).Id"><p class="far fa-circle" style="color: black;"></p></a></td>
                                    break;
                                case 1:
                                    <td data-toggle="tooltip" data-placement="top" title="@Model.Students.Find(s => s.Id == (Model.GradeGrid[x,y].StudentId)).LastName:@Model.Columns[y].EventNum"><a href="#myModal" data-toggle="modal" data-id="@Model.GradeGrid[x,y].State" data-id2="@Model.Columns[y].EventNum" data-id3="@Model.Students.Find(s => s.Id == (Model.GradeGrid[x,y].StudentId)).LastName" data-id4="@x" data-id5="@Model.Columns[y].Id" data-id6="@Model.Students.Find(s => s.Id == (Model.GradeGrid[x, y].StudentId)).Id"><p class="fas fa-plane" style="color: royalblue;"></p></a></td>
                                    break;
                                case 2:
                                    <td data-toggle="tooltip" data-placement="top" title="@Model.Students.Find(s => s.Id == (Model.GradeGrid[x,y].StudentId)).LastName:@Model.Columns[y].EventNum"><a href="#myModal" data-toggle="modal" data-id="@Model.GradeGrid[x,y].State" data-id2="@Model.Columns[y].EventNum" data-id3="@Model.Students.Find(s => s.Id == (Model.GradeGrid[x,y].StudentId)).LastName" data-id4="@x" data-id5="@Model.Columns[y].Id" data-id6="@Model.Students.Find(s => s.Id == (Model.GradeGrid[x, y].StudentId)).Id"><p class="fas fa-star" style="color: darkred;"></p></a></td>
                                    break;
                                case 3:
                                    <td data-toggle="tooltip" data-placement="top" title="@Model.Students.Find(s => s.Id == (Model.GradeGrid[x,y].StudentId)).LastName:@Model.Columns[y].EventNum"><a href="#myModal" data-toggle="modal" data-id="@Model.GradeGrid[x,y].State" data-id2="@Model.Columns[y].EventNum" data-id3="@Model.Students.Find(s => s.Id == (Model.GradeGrid[x,y].StudentId)).LastName" data-id4="@x" data-id5="@Model.Columns[y].Id" data-id6="@Model.Students.Find(s => s.Id == (Model.GradeGrid[x, y].StudentId)).Id"><p class="fas fa-star" style="color: darkblue;"></p></a></td>
                                    break;
                                case 4:
                                    <td data-toggle="tooltip" data-placement="top" title="@Model.Students.Find(s => s.Id == (Model.GradeGrid[x,y].StudentId)).LastName:@Model.Columns[y].EventNum"><a href="#myModal" data-toggle="modal" data-id="@Model.GradeGrid[x,y].State" data-id2="@Model.Columns[y].EventNum" data-id3="@Model.Students.Find(s => s.Id == (Model.GradeGrid[x,y].StudentId)).LastName" data-id4="@x" data-id5="@Model.Columns[y].Id" data-id6="@Model.Students.Find(s => s.Id == (Model.GradeGrid[x, y].StudentId)).Id"><p class="fas fa-star" style="color: silver;"></p></a></td>
                                    break;
                                case 5:
                                    <td data-toggle="tooltip" data-placement="top" title="@Model.Students.Find(s => s.Id == (Model.GradeGrid[x,y].StudentId)).LastName:@Model.Columns[y].EventNum"><a href="#myModal" data-toggle="modal" data-id="@Model.GradeGrid[x,y].State" data-id2="@Model.Columns[y].EventNum" data-id3="@Model.Students.Find(s => s.Id == (Model.GradeGrid[x,y].StudentId)).LastName" data-id4="@x" data-id5="@Model.Columns[y].Id" data-id6="@Model.Students.Find(s => s.Id == (Model.GradeGrid[x, y].StudentId)).Id"><p class="fas fa-star" style="color: gold;"></p></a></td>
                                    break;
                                default:
                                    <td data-toggle="tooltip" data-placement="top" title="@Model.Students.Find(s => s.Id == (Model.GradeGrid[x,y].StudentId)).LastName:@Model.Columns[y].EventNum" class="fas fa-star"></td>
                                    break;
                            }                                             
                        }
                    </tr>

                }
            }
            catch (Exception e)
            {
                @ViewData["LoadError"]
            }



        </tbody>
    </table>

</div>


<!-- Modal Popup Section of this view-->
<div id="myModal" class="modal  alert-success" tabindex="-1" role="dialog" style="text-align: center; border-radius:80px; width:20%; height:40%; margin:auto; align-content:flex-start; text-align:center;">
    <div>
        <div class="modal-header">
            <script>
                function changeColor() {
                    var select = $("#dropDown");
                    if (select.val() === "1") {
                        select.css("color", "Black");
                    }
                    else if (select.val() === "2") {
                        select.css("color", "royalblue");
                    }
                    else if (select.val() === "3") {
                        select.css("color", "darkred");
                    }
                    else if (select.val() === "4") {
                        select.css("color", "darkblue");
                    }
                    else if (select.val() === "5") {
                        select.css("color", "silver");
                    }
                    else if (select.val() === "6") {
                        select.css("color", "gold");
                    }
                }


                function ChangeSelected() {
                    var select = $("#dropDown");
                    select.select(3);
                }

                /**/</script>
        </div>

        <h3>Change Signoff Status<button type="button" class="close" data-dismiss="modal" aria-hidden="false" style="margin-right:10px;">x</button></h3>

        <div class="modal-lg" style="text-align:left; margin-left:2em;">
            <form asp-action="ChangeGrade">
                <input type="hidden" name="x" />
                <input type="hidden" name="y" />
                <input type="hidden" name="z" />
                <input type="hidden" name="sectionId" value=@ViewData["sectionId"]/>
                <strong>@ViewData["sectionId"]</strong>
                <strong>Student:</strong><p name="lastName">Current Grade: </p>
                <strong>Event:</strong><p name="eventId"></p>
                <strong>@ViewData["gradeId"]</strong>
                <strong>Current Grade:</strong><p name="state" ></p>
                <strong>Select New Grade:</strong>
                <select name="ChangeState" id="dropDown" onload="changeSelected();"  onchange="changeColor();" class="far" style="height:55px; width:55px; font-weight:900; display:inline-block;">
                    <option value="1" style="font-weight: 900; color:black;">&#xf111;</option>
                    <option value="2" style="font-weight: 900; color: royalblue;">&#xf072;</option>
                    <option value="3" style="font-weight: 900; color: darkred;">&#xf005;</option>
                    <option value="4" style="font-weight: 900; color: darkblue;">&#xf005;</option>
                    <option value="5" style="font-weight: 900; color: silver;">&#xf005;</option>
                    <option value="6" style="font-weight: 900; color: gold;">&#xf005;</option>
                </select>
               


                <div style="margin-top: 10px; align-content:flex-end;">
                    <button class="btn" data-dismiss="modal" aria-hidden="false">Close</button>
                    <input type="submit" id="submitButton"  class="btn btn-primary" formaction="/Home/ChangeGrade/@Model.GradeGrid[0,0].SectionId" value="Make Change" />

                </div>
            </form>
        </div>
        <div class="modal-footer">

        </div>
    </div>
    
</div>